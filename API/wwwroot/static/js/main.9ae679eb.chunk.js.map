{"version":3,"sources":["app/models/activity.ts","app/models/pagination.ts","app/api/agent.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/widthStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/TextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/TextArea.tsx","app/common/form/SelectInput.tsx","app/common/select_options/categoryOptions.ts","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/image_upload/PhotoWidgetDropzone.tsx","app/common/image_upload/PhotoWidgetCropper.tsx","app/common/image_upload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileBody.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","app/layout/ScrollToTop.tsx","index.tsx"],"names":["Activity","init","Object","assign","this","ActivityFormValues","activity","id","undefined","title","category","description","date","city","venue","PaginatedResult","data","pagination","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","axiosRequestConfig","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","config","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","create","update","attend","Account","register","user","login","current","Profiles","username","listFollowings","predicate","listActivities","uploadPhoto","file","formData","FormData","append","setMainPhoto","profile","updateFollowing","deletePhoto","Profile","displayName","image","ActivityStore","activities","Map","selectedActivity","loading","loadingInitial","pagingParams","set","setActivity","userStore","isGoing","attendees","some","attendee","isHost","hostUsername","host","find","Date","deleteActivity","setSelectedActivity","setSelectedActivityAttendees","setSelectedActivityIsGoing","setSelectedActivityIsCancelled","isCancelled","setLoading","state","setLoadingInitial","setPagination","setPagingParams","setPredicate","value","forEach","detail","console","log","axiosParams","result","newActivity","runInAction","updatedActivity","filter","updateAttendeeFollowing","following","followersCount","cancel","makeAutoObservable","reaction","keys","clear","Array","from","values","sort","activityA","activityB","getTime","entries","activitiesByDate","reduce","format","URLSearchParams","toString","toISOString","ProfileStore","mainLoading","followingsLoading","uploading","followings","activeTab","profileActivities","loadingActivities","setProfile","setProfileFollowersCount","count","setProfileFollowingCount","followingCount","filterProfilePhoto","photoId","photos","p","setProfileFollowing","pushProfilePhoto","photo","setProfileMainPhoto","isMain","iPhoto","setMainLoading","setFollowingsLoading","setUploading","setFollowings","profiles","setActiveTab","setProfileActivities","setLoadingActivities","handleFollowingChange","load","loadFollowings","loadProfileActivities","setUserImage","setDisplayName","activityStore","UserStore","setUser","name","getUser","creds","setToken","modalStore","close","logout","window","localStorage","removeItem","WidthStore","isMobile","setIsMobile","innerWidth","getItem","appLoaded","setAppLoaded","setItem","modal","open","content","profileStore","commentStore","hubConnection","activityComments","setHubConnection","setActivityComments","activityComment","createdAt","unshiftActivityComments","unshift","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","stopHubConnection","stop","clearComments","addComment","invoke","widthStore","StoreContext","createContext","useStore","useContext","observer","useState","width","setWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","Link","positive","position","Image","avatar","spaced","Dropdown","pointing","text","icon","onClick","Reveal","animated","Content","visible","fluid","color","hidden","mouseEvent","syntheticEvent","preventDefault","Card","Header","Description","bio","length","substring","truncateBio","extra","Icon","followingStyle","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","basic","secondary","clearing","floated","groupedActivities","group","sub","ActivityFilters","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","loadingNext","setLoadingNext","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","TextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","TextArea","SelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","categoryOptions","DateInput","selected","useHistory","useParams","formActivity","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","keyboardEvent","shiftKey","Comment","comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","err","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isProfileFromCurrentUser","editMode","Tab","Pane","panes","menuItem","pane","menu","onTabChange","e","tabProps","activeIndex","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dropzoneDefaultStyle","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setCropper","imagePreview","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","target","setTarget","addPhotoMode","setAddPhotoMode","currentTarget","handleSetMainPhoto","handleDeletePhoto","Statistic","Divider","PrivateRoute","Component","component","routeProps","routeComponentProps","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.9ae679eb.chunk.js","sourcesContent":["import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, ProfileActivity } from '../models/profile';\r\nimport { User, UserLogin } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(axiosRequestConfig => {\r\n    const token = store.commonStore.token;\r\n    if (token) axiosRequestConfig.headers.Authorization = `Bearer ${token}`;\r\n    return axiosRequestConfig;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    } else {\r\n        return response;\r\n    }\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            } else if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('not-found');\r\n            }\r\n            else if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    // if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    // }\r\n                }\r\n\r\n                throw modalStateErrors.flat();\r\n            }\r\n\r\n            break;\r\n        case 401:\r\n            toast.error('Unauthorized');\r\n            break;\r\n        case 404:\r\n            history.push('not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    register: (user: UserLogin) => requests.post<User>('account/register', user),\r\n    login: (user: UserLogin) => requests.post<User>('account/login', user),\r\n    current: () => requests.get<User>('account')\r\n}\r\n\r\nconst Profiles = {\r\n    details: (username: string) => requests.get<Profile>(`profiles/${username}`),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<ProfileActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`photos/${id}`, {}),\r\n    update: (profile: Partial<Profile>) => requests.put(`/profiles`, profile), // because only updating 2 properties of 'Profile' use Partial<>\r\n    updateFollowing: (username: string) => requests.post(`follow/${username}`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`photos/${id}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay);\r\n    })\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface ProfileActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport agent from \"../api/agent\";\r\nimport { format } from \"date-fns\";\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activities = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activities.clear();\r\n                this.list();\r\n            }\r\n        )\r\n    }\r\n\r\n    setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                attendee => attendee.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(attendee => attendee.username === activity.hostUsername)\r\n        }\r\n\r\n        activity.date = new Date(activity.date!)\r\n        this.activities.set(activity.id, activity);\r\n    }\r\n\r\n    deleteActivity = (id: string) => {\r\n        this.activities.delete(id);\r\n    }\r\n\r\n    setSelectedActivity = (activity: Activity | undefined) => {\r\n        this.selectedActivity = activity;\r\n    }\r\n\r\n    setSelectedActivityAttendees = (attendees: Profile[]) => {\r\n        this.selectedActivity!.attendees = attendees;\r\n    }\r\n\r\n    setSelectedActivityIsGoing = (isGoing: boolean) => {\r\n        this.selectedActivity!.isGoing = isGoing;\r\n    }\r\n\r\n    setSelectedActivityIsCancelled = (isCancelled: boolean) => {\r\n        this.selectedActivity!.isCancelled = isCancelled;\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'startDate':\r\n                this.predicate.delete(predicate);\r\n                this.predicate.set(predicate, value);\r\n                break;\r\n            default:\r\n                resetPredicate();\r\n                this.predicate.set(predicate, true);\r\n        }\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activities.values())\r\n            .sort((activityA, activityB) => activityA.date!.getTime() - activityB.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');//.toISOString().split('T')[0];\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    detail = async (id: string) => {\r\n        let activity = this.activities.get(id);\r\n\r\n        if (activity) {\r\n            this.setSelectedActivity(activity);\r\n            return activity;\r\n        } else {\r\n            this.setLoadingInitial(true);\r\n\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n\r\n                this.setActivity(activity);\r\n                this.setSelectedActivity(activity);\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n\r\n        this.setLoadingInitial(false);\r\n    }\r\n\r\n    list = async () => {\r\n        this.setLoadingInitial(true);\r\n\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n\r\n            this.setPagination(result.pagination);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoadingInitial(false);\r\n    }\r\n\r\n    create = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            this.setSelectedActivity(newActivity);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    update = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.detail(activity.id), ...activity }\r\n                    this.activities.set(activity.id, updatedActivity as unknown as Activity);\r\n                    this.setSelectedActivity(updatedActivity as unknown as Activity);\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    attend = async () => {\r\n        this.setLoading(true);\r\n        \r\n        const user = store.userStore.user;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            if (this.selectedActivity?.isGoing) {\r\n                this.setSelectedActivityAttendees(this.selectedActivity!.attendees?.filter(a => a.username !== user?.username)!);\r\n                this.setSelectedActivityIsGoing(false);\r\n            } else {\r\n                const attendee = new Profile(user!);\r\n                const attendees = this.selectedActivity?.attendees!;\r\n                attendees.push(attendee);\r\n                this.setSelectedActivityAttendees(attendees);\r\n                this.setSelectedActivityIsGoing(false);\r\n            }\r\n\r\n            this.setActivity(this.selectedActivity!);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoading(false);\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activities.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        });\r\n    }\r\n\r\n    cancel = async () => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n\r\n            this.setSelectedActivityIsCancelled(!this.selectedActivity?.isCancelled);\r\n            this.setActivity(this.selectedActivity!);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoading(false);\r\n    }\r\n\r\n    delete = async (id: string) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.delete(id);\r\n\r\n            this.deleteActivity(id);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoading(false);\r\n    }\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, ProfileActivity } from \"../models/profile\"\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loading = false;\r\n    mainLoading = false;\r\n    followingsLoading = false;\r\n    uploading = false;\r\n    followings: Profile[] = [];\r\n    activeTab = 0;;\r\n    profileActivities: ProfileActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                switch (activeTab) {\r\n                    case 3:\r\n                        this.loadFollowings('followers');\r\n                        break;\r\n                    case 4:\r\n                        this.loadFollowings('following');\r\n                        break;\r\n                    default:\r\n                        this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setProfile = (profile: Profile) => {\r\n        this.profile = profile;\r\n    }\r\n\r\n    setProfileFollowersCount = (count: number) => {\r\n        this.profile!.followersCount = count;\r\n    }\r\n\r\n    setProfileFollowingCount = (count: number) => {\r\n        this.profile!.followingCount = count;\r\n    }\r\n\r\n    filterProfilePhoto = (photoId: string) => {\r\n        if (this.profile) {\r\n            this.profile.photos = this.profile.photos?.filter(p => p.id !== photoId);\r\n        }\r\n    }\r\n\r\n    setProfileFollowing = (state: boolean) => {\r\n        this.profile!.following = state;\r\n    } \r\n\r\n    pushProfilePhoto = (photo: Photo) => {\r\n        this.profile?.photos?.push(photo);\r\n    }\r\n\r\n    setProfileMainPhoto = (photo: Photo) => {\r\n        if (this.profile && this.profile.photos) {\r\n            this.profile.photos.find(photo => photo.isMain)!.isMain = false;\r\n            this.profile.photos.find(iPhoto => iPhoto.id === photo.id)!.isMain = true;\r\n            this.profile.image = photo.url;\r\n        }\r\n    }\r\n\r\n    setLoading = (state: boolean) => {\r\n        this.loading = state;\r\n    }\r\n\r\n    setMainLoading = (state: boolean) => {\r\n        this.mainLoading = state;\r\n    }\r\n\r\n    setFollowingsLoading = (state: boolean) => {\r\n        this.followingsLoading = state;\r\n    }\r\n\r\n    setUploading = (state: boolean) => {\r\n        this.uploading = state;\r\n    }\r\n\r\n    setFollowings = (profiles: Profile[]) => {\r\n        this.followings = profiles;\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    setProfileActivities = (profileActivities: ProfileActivity[]) => {\r\n        this.profileActivities = profileActivities;\r\n    }\r\n\r\n    setLoadingActivities = (state: boolean) => {\r\n        this.loadingActivities = state;\r\n    }\r\n\r\n    handleFollowingChange = (username: string) => {\r\n        this.followings.forEach(profile => {\r\n            if (profile.username === username) {\r\n                profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                profile.following = !profile.following;\r\n            }\r\n        })\r\n    }\r\n\r\n    // this is called computed property\r\n    get isProfileFromCurrentUser() {\r\n        return store.userStore.user && this.profile\r\n            ? store.userStore.user.username === this.profile.username\r\n            : false;\r\n    }\r\n\r\n    load = async (username: string) => {\r\n        this.setLoading(true);\r\n\r\n        try {\r\n            this.setProfile(await agent.Profiles.details(username));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoading(false);\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.setFollowingsLoading(true);\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            this.setFollowings(followings);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setFollowingsLoading(false);\r\n    }\r\n    \r\n    loadProfileActivities = async (username: string, predicate?: string) => {\r\n        this.setLoadingActivities(true);\r\n\r\n        try {\r\n            this.setProfileActivities(await agent.Profiles.listActivities(username, predicate!));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setLoadingActivities(false);\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.setUploading(true);\r\n\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            if (this.profile) {\r\n                this.pushProfilePhoto(photo);\r\n\r\n                if (photo.isMain && store.userStore.user) {\r\n                    store.userStore.setUserImage(photo.url);\r\n                    this.profile.image = photo.url;\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setUploading(false);\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.setMainLoading(true);\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n\r\n            store.userStore.setUserImage(photo.url);\r\n\r\n            if (this.profile && this.profile.photos) {\r\n                this.setProfileMainPhoto(photo);\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setMainLoading(false);\r\n    }\r\n\r\n    update = async (profile: Partial<Profile>) => {\r\n        this.setMainLoading(true);\r\n\r\n        try {\r\n            await agent.Profiles.update(profile);\r\n\r\n            if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                store.userStore.setDisplayName(profile.displayName);\r\n            }\r\n\r\n            this.setProfile({ ...this.profile, ...profile as Profile });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setMainLoading(false);\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.setMainLoading(true);\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n\r\n            if (this.profile) {\r\n                if (this.profile.username === store.userStore.user?.username) {\r\n                    this.setProfileFollowingCount(\r\n                        following\r\n                            ? this.profile.followingCount + 1\r\n                            : this.profile.followingCount - 1);\r\n                } else if (this.profile.username === username) {\r\n                    this.setProfileFollowersCount(\r\n                        following\r\n                            ? this.profile.followersCount + 1\r\n                            : this.profile.followersCount - 1);\r\n                    this.setProfileFollowing(!this.profile.following);\r\n                }\r\n            }\r\n\r\n            this.handleFollowingChange(username);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setMainLoading(false);\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.setMainLoading(true);\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            this.filterProfilePhoto(photo.id);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        this.setMainLoading(false);\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserLogin } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    setUser = (user: User) => {\r\n        this.user = user;\r\n    }\r\n\r\n    setUserImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            this.setUser(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    register = async (creds: UserLogin) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.setUser(user);\r\n            history.push('/activities');\r\n            store.modalStore.close();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    login = async (creds: UserLogin) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.setUser(user);\r\n            history.push('/activities');\r\n            store.modalStore.close();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\";\r\n\r\nexport default class WidthStore {\r\n    isMobile: boolean = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setIsMobile = (isMobile: boolean) => {\r\n        this.isMobile = isMobile;\r\n    }\r\n\r\n    handleWindowSizeChange() {\r\n        // console.log(window.innerWidth);\r\n        // const isMobile: boolean = window.innerWidth <= 768;\r\n        // this.setIsMobile(isMobile);\r\n        this.isMobile = window.innerWidth <= 768;\r\n        console.log(this.isMobile);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\nimport WidthStore from \"./widthStore\";\r\n\r\ninterface Store {\r\n    commonStore: CommonStore;\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n    widthStore: WidthStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore(),\r\n    widthStore: new WidthStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    open = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    close = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable } from \"mobx\";\r\nimport { ActivityComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    hubConnection: HubConnection | null = null;\r\n    activityComments: ActivityComment[] = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    setHubConnection = (hubConnection: HubConnection) => {\r\n        this.hubConnection = hubConnection;\r\n    }\r\n\r\n    setActivityComments = (activityComments: ActivityComment[]) => {\r\n        activityComments.forEach(activityComment => {\r\n            activityComment.createdAt = new Date(activityComment.createdAt + 'Z');\r\n        })\r\n\r\n        this.activityComments = activityComments;\r\n    }\r\n\r\n    unshiftActivityComments = (activityComment: ActivityComment) => {\r\n        activityComment.createdAt = new Date(activityComment.createdAt);\r\n        this.activityComments.unshift(activityComment);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder().withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                accessTokenFactory: () => store.userStore.user?.token!\r\n            })\r\n            .withAutomaticReconnect()\r\n            .configureLogging(LogLevel.Information)\r\n            .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing connection to comments...', error))\r\n\r\n            this.hubConnection.on('LoadComments', (activityComments: ActivityComment[]) => {\r\n                this.setActivityComments(activityComments);\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (activityComment: ActivityComment) => {\r\n                this.unshiftActivityComments(activityComment);\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error trying to stop comment connection...', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.setActivityComments([]);\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try{\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    const [width, setWidth] = useState<number>(window.innerWidth);\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n    \r\n    let isMobile: boolean = (width <= 768);\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={ NavLink } to='/' exact header>\r\n                    <img src='/assets/logo.png' alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    { isMobile ? '' : 'HOME' }\r\n                </Menu.Item>\r\n                <Menu.Item name='Activities' as={ NavLink } to='/activities' />\r\n                <Menu.Item>\r\n                    <Button\r\n                        as={ Link } to='/createActivity'\r\n                        positive content={'Create' + (isMobile ? '' : ' Event')}\r\n                    />\r\n                </Menu.Item>\r\n                {/* <Menu.Item name='Error Validation Test' as={ NavLink } to='/errors' /> */}\r\n                <Menu.Item position='right'>\r\n                    <Image src={ user?.image || '/assets/user.png' } avatar spaced='right'/>\r\n                    <Dropdown pointing='top right' text={ user?.displayName }>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={ Link } to={ `/profiles/${user?.username}` } text='My Profile' icon='user'/>\r\n                            <Dropdown.Item onClick={ logout } text='Logout' icon='power'/>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(syntheticEvent: SyntheticEvent, username: string) {\r\n        syntheticEvent.preventDefault();\r\n        profile.following\r\n            ? profileStore.updateFollowing(username, false)\r\n            : profileStore.updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={ {width: '100%'} }>\r\n                <Button\r\n                    fluid color='teal'\r\n                    content={ (profile.following ? '' : 'Not ') + 'Following' }\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={ {width: '100%'} }>\r\n                <Button\r\n                    fluid\r\n                    color={ profile.following ? 'red' : 'green' }\r\n                    content={ profile.following ? 'Unfollow' : 'Follow' }\r\n                    loading={ profileStore.mainLoading }\r\n                    onClick={ (mouseEvent) => handleFollow(mouseEvent, profile.username) }\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile } : Props) {\r\n    function truncateBio(bio: string | undefined) {\r\n        if (bio) {\r\n            return bio.length > 40\r\n                ? bio.substring(0, 37) + '...'\r\n                : bio;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={ Link } to={ `/profiles/${profile.username}` }>\r\n            <Image src={ profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{ profile.displayName }</Card.Header>\r\n                <Card.Description>{ truncateBio(profile.bio) }</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                { profile.followersCount } follower{ profile.followersCount === 1 ? '' : 's' }\r\n            </Card.Content>\r\n            <FollowButton profile={ profile } />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees } : Props) {\r\n    const followingStyle = {\r\n        borderColor: 'green',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {\r\n                attendees.map(attendee => (\r\n                    <Popup hoverable key={ attendee.username } trigger={\r\n                        <List.Item key={ attendee.username } as={ Link } to={ `/profiles/${attendee.username}` }>\r\n                            <Image\r\n                                size='mini' circular bordered\r\n                                src={ attendee.image || '/assets/user.png' }\r\n                                style={ attendee.following ? followingStyle : null }\r\n                            />\r\n                        </List.Item> }\r\n                    >\r\n                        <Popup.Content>\r\n                            <ProfileCard profile={ attendee } />\r\n                        </Popup.Content>\r\n                    </Popup>))\r\n            }\r\n        </List>\r\n    )\r\n})","import { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity } : Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                { activity.isCancelled && (\r\n                    <Label attached='top' color='red' content='Cancelled' style={ {textAlign: 'center'} } />\r\n                ) }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={ {marginBottom: 3} }size='tiny' circular src={ activity.host?.image || '/assets/user.png' } />\r\n                        <Item.Content>\r\n                            <Item.Header as={ Link } to={ `/activities/${activity.id}` }>{ activity.title }</Item.Header>\r\n                            <Item.Description>Hosted by <Link to={ `profiles/${activity.hostUsername}` }>{ activity.host?.displayName }</Link></Item.Description>\r\n                            {\r\n                                activity.isHost\r\n                                ? (<Item.Description>\r\n                                        <Label basic color='orange'>\r\n                                            You are the host of this activity\r\n                                        </Label>\r\n                                    </Item.Description>)\r\n                                : activity.isGoing && (\r\n                                    <Item.Description>\r\n                                        <Label basic color='green'>\r\n                                            You are going to this activity\r\n                                        </Label>\r\n                                    </Item.Description>)\r\n                            }\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' />{ format(activity.date!, 'dd MMM yyyy h:mm aa') }\r\n                    <Icon name='marker' />{ activity.venue }\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={ activity.attendees! } />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{ activity.description }</span>\r\n                <Button\r\n                    as={ Link } to={ `/activities/${activity.id}` }\r\n                    floated='right' content='View' color='teal'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n\r\n    return (\r\n        <>\r\n            { activityStore.groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={ group }>\r\n                    <Header sub color='teal'>\r\n                        { group }\r\n                    </Header>\r\n                    { activities.map(activity => (\r\n                        <ActivityListItem key={ activity.id } activity={ activity } />\r\n                    )) }\r\n                </Fragment>\r\n            )) }\r\n        </>\r\n    )\r\n})","import Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Events'\r\n                    active={ predicate.has('all') }\r\n                    onClick={ () => setPredicate('all', 'true') }\r\n                />\r\n                <Menu.Item\r\n                    content=\"You're going\"\r\n                    active={ predicate.has('isGoing') }\r\n                    onClick={ () => setPredicate('isGoing', 'true') }\r\n                />\r\n                <Menu.Item\r\n                    content=\"You're hosting\"\r\n                    active={ predicate.has('isHost') }\r\n                    onClick={ () => setPredicate('isHost', 'true') }\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={ (date) => setPredicate('startDate', date as Date) }\r\n                value={ predicate.get('startDate') || new Date() }\r\n            />\r\n        </>\r\n    )\r\n}","import { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={ {marginTop: 25} }>\r\n                <Segment.Group>\r\n                    <Segment style={ {minHeight: 110} }>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={ {minHeight: 70} } />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","\r\nimport { useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { pagination } = activityStore;\r\n\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    const [width, setWidth] = useState<number>(window.innerWidth);\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n    \r\n    let isMobile: boolean = (width <= 768);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        activityStore.setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        activityStore.list().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityStore.activities.size <= 1) activityStore.list();\r\n      activityStore.list();\r\n    }, [activityStore])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={ isMobile ? '16' : '10' }>\r\n                {\r\n                    activityStore.loadingInitial && !loadingNext\r\n                        ? (\r\n                            <>\r\n                                <ActivityListItemPlaceholder />\r\n                                <ActivityListItemPlaceholder />\r\n                            </>\r\n                        )\r\n                        : (\r\n                            <InfiniteScroll\r\n                                pageStart={ 1 }\r\n                                loadMore={ handleGetNext }\r\n                                hasMore={ !loadingNext && !!pagination && pagination.currentPage < pagination.totalPages }\r\n                                initialLoad={ false }\r\n                            >\r\n                                <ActivityList />\r\n                            </InfiniteScroll>\r\n                        )\r\n                }\r\n            </Grid.Column>\r\n            {\r\n                !isMobile && (\r\n\r\n                    <Grid.Column width='6'>\r\n                        <ActivityFilters />\r\n                    </Grid.Column>\r\n                )\r\n            }\r\n            <Grid.Column width='10'>\r\n                <Loader active={ loadingNext } />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={ meta.touched && !!meta.error }>\r\n            <label>{ props.label }</label>\r\n            <input { ...field} { ...props } />\r\n            {\r\n                meta.touched && meta.error\r\n                ? (<Label basic color='red'>{ meta.error }</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik initialValues={ {email: '', password: '', error: null} } onSubmit={ (values, { setErrors }) => userStore.login(values).catch(error => setErrors({ error: 'Invalid credentials' })) }>\r\n            { ({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={ handleSubmit } autoComplete='off'>\r\n                    <Header as='h2' content='Login' color='teal' textAlign='center' />\r\n                    <TextInput name='email' placeholder='Email' />\r\n                    <TextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={ () => <Label style={ {marginBottom: 10} } basic color='red' content={ errors.error }/> }/>\r\n                    <Button loading={ isSubmitting } positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    // errors: string[] | null;\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            { errors && (\r\n                <Message.List>\r\n                    {/* { errors.map((error: any, key) => ( */}\r\n                    { errors.map((error: any, key: any) => (\r\n                        <Message.Item key={ key }>{ error }</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik initialValues={ {displayName: '', username: '', email: '', password: '', error: null} } \r\n            onSubmit={ (values, { setErrors }) => userStore.register(values).catch(error => setErrors({ error })) }\r\n            validationSchema={ Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            }) }\r\n        >\r\n            { ({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={ handleSubmit } autoComplete='off'>\r\n                    <Header as='h2' content='Sign up' color='teal' textAlign='center' />\r\n                    <TextInput name='displayName' placeholder='Display Name' />\r\n                    <TextInput name='username' placeholder='User Name' />\r\n                    <TextInput name='email' placeholder='Email' />\r\n                    <TextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage name='error' render={ () => <ValidationErrors errors={ errors.error } /> }/>\r\n                    <Button disabled={ !isValid || !dirty || isSubmitting }\r\n                        loading={ isSubmitting } \r\n                        positive content='Register' type='submit' fluid\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                </Header>\r\n                { userStore.isLoggedIn \r\n                    ? (\r\n                        <>\r\n                            <Header as='h2' inverted content='Welcome!' />\r\n                            <Button as={ Link } to='/activities' size='huge' inverted>\r\n                                Access Sample App\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button onClick={ () => modalStore.open(<LoginForm />) } size='huge' inverted>\r\n                                Login\r\n                            </Button>\r\n                            <Button onClick={ () => modalStore.open(<RegisterForm />) } size='huge' inverted>\r\n                                Register\r\n                            </Button>\r\n                        </>\r\n                    )}                \r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function TextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={ meta.touched && !!meta.error }>\r\n            <label>{ props.label }</label>\r\n            <textarea { ...field} { ...props } />\r\n            {\r\n                meta.touched && meta.error\r\n                ? (<Label basic color='red'>{ meta.error }</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function SelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={ meta.touched && !!meta.error }>\r\n            <label>{ props.label }</label>\r\n            <Select clearable \r\n                options={ props.options }\r\n                value={ field.value || null }\r\n                onChange={ (event, data) => helpers.setValue(data.value) }\r\n                onBlur={ () => helpers.setTouched(true) }\r\n                placeholder={ props.placeholder }\r\n            />\r\n            {\r\n                meta.touched && meta.error\r\n                ? (<Label basic color='red'>{ meta.error }</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n]","import { useField } from \"formik\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n                                        /* by using 'Partial<>' all of the properties in the props are optional.\r\n                                        This was used because giving error because not pasing 'onChange' property on 'ActivityForm',\r\n                                        but it is already established inside the 'DatePicker' here... */\r\nexport default function DateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={ meta.touched && !!meta.error }>\r\n            <DatePicker\r\n                { ...field }\r\n                { ...props }\r\n                selected={ (field.value && new Date(field.value)) || null }\r\n                onChange={ value => helpers.setValue(value) }\r\n            />\r\n            {\r\n                meta.touched && meta.error\r\n                ? (<Label basic color='red'>{ meta.error }</Label>)\r\n                : null\r\n            }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport TextInput from '../../../app/common/form/TextInput';\r\nimport TextArea from '../../../app/common/form/TextArea';\r\nimport SelectInput from '../../../app/common/form/SelectInput';\r\nimport { categoryOptions } from '../../../app/common/select_options/categoryOptions';\r\nimport DateInput from '../../../app/common/form/DateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n  \r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [formActivity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required('The activity category is required'),\r\n        date: Yup.string().required('The activity date is required'),\r\n        venue: Yup.string().required('The activity venue is required'),\r\n        city: Yup.string().required('The activity category is required')\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) activityStore.detail(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n    }, [id, activityStore])\r\n\r\n    function handleFormSubmit(formActivity: ActivityFormValues) {\r\n        if (!formActivity.id) {\r\n            formActivity.id = uuid();\r\n\r\n            activityStore.create(formActivity).then(() => {\r\n                history.push(`/activities/${formActivity.id}`);\r\n            })\r\n        } else {\r\n            activityStore.update(formActivity).then(() => {\r\n                history.push(`/activities/${formActivity.id}`);\r\n            });\r\n        }\r\n    }\r\n\r\n    if (activityStore.loadingInitial) return <LoadingComponent content='Loading Activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik enableReinitialize\r\n                initialValues={ formActivity }\r\n                validationSchema={ validationSchema }\r\n                onSubmit={ values => handleFormSubmit(values) }\r\n            >\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={ handleSubmit } autoComplete='off'>\r\n                        {/* <FormTextInput>\r\n                            <TextInput placeholder='Title' name='title' />\r\n                            <ErrorMessage name='title' render={ error => <Label basic color='red' content={ error } /> } />\r\n                        </FormTextInput> */}\r\n\r\n                        <TextInput placeholder='Title' name='title' />\r\n                        <TextArea rows={ 3 } placeholder='Description' name='description' />\r\n                        <SelectInput options={ categoryOptions } placeholder='Category' name='category' />\r\n                        <DateInput placeholderText='Date' name='date' showTimeSelect timeCaption='time' dateFormat='MMMM d, yyyy h:mm aa' />\r\n\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <TextInput placeholder='City' name='city' />\r\n                        <TextInput placeholder='Venue' name='venue' />\r\n\r\n                        <Button \r\n                            disabled={ isSubmitting || !dirty || !isValid }\r\n                            loading={ isSubmitting } \r\n                            floated='right' positive type='submit' content='Submit'\r\n                        />\r\n                        <Button as={ Link } to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    );\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId } : Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n            <Header>Comments</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={ (values, { resetForm }) => commentStore.addComment(values).then(() => resetForm()) }\r\n                    initialValues={ {body: ''} }\r\n                    validationSchema={ Yup.object({\r\n                        body: Yup.string().required()\r\n                    }) }\r\n                >\r\n                {\r\n                    ({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {\r\n                                    (props : FieldProps) => (\r\n                                    <div style={ {position: 'relative'} }>\r\n                                        <Loader active={ isSubmitting } />\r\n                                        <textarea \r\n                                            placeholder='Type comment...'\r\n                                            rows={ 2 }\r\n                                            { ...props.field }\r\n                                            onKeyPress={ keyboardEvent => {\r\n                                                if (keyboardEvent.key === 'Enter')\r\n                                                {\r\n                                                    if (keyboardEvent.shiftKey) \r\n                                                    {\r\n                                                        return;\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        keyboardEvent.preventDefault();\r\n                                                        isValid && handleSubmit();\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>) \r\n                                }\r\n                            </Field>\r\n                        </Form>\r\n                    )\r\n                }\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {\r\n                        commentStore.activityComments.map(comment => (\r\n                            <Comment key={ comment.id }>\r\n                                <Comment.Avatar src={ comment.image || '/assets/user.png' } />\r\n                                <Comment.Content>\r\n                                    <Comment.Author as={ Link } to={ `/profiles/${comment.username}` }>{ comment.displayName }</Comment.Author>\r\n                                    <Comment.Metadata>\r\n                                        <div>{ formatDistanceToNow(comment.createdAt) } ago</div>\r\n                                    </Comment.Metadata>\r\n                                    <Comment.Text style={ {whiteSpace: 'pre-wrap'} }>{ comment.body }</Comment.Text>\r\n                                </Comment.Content>\r\n                            </Comment>\r\n                        ))\r\n                    }\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from \"date-fns\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const { activityStore } = useStore();\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={ {padding: '0'} }>\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={ activityImageStyle }/>\r\n                { activity.isCancelled && (\r\n                    <Label style={ {position: 'absolute', zIndex: 1000, left: -14, top: 20} } ribbon color='red' content='Cancelled' />\r\n                )}\r\n                <Segment style={ activityImageTextStyle } basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={ activity.title }\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                { activity.date &&\r\n                                    <p>{ format(activity.date!, 'dd MMM yyyy') }</p>\r\n                                }\r\n                                <p>\r\n                                    Hosted by <strong><Link to={ `/profiles/${activity.host?.username}` }>{ activity.host?.displayName }</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                { activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            onClick={ activityStore.cancel }\r\n                            loading={ activityStore.loading }\r\n                            color={ activity.isCancelled ? 'green' : 'red' }\r\n                            floated='right' content={ activity.isCancelled ? 'Re-Activate Activity' : 'Cancel Activity' }\r\n                        />\r\n                        <Button disabled={ activity.isCancelled } as={ Link } to={ `/edit/${activity.id}` } color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing\r\n                    ? (\r\n                        <Button loading={ activityStore.loading } onClick={ activityStore.attend }>Cancel attendance</Button>\r\n                    ) : (\r\n                        <Button disabled={ activity.isCancelled } loading={ activityStore.loading } onClick={ activityStore.attend } color='teal'>Join Activity</Button>\r\n                    ) }\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from \"date-fns\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width='1'>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width='15'>\r\n                        <p>{ activity.description }</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width='1'>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width='15'>\r\n                    { activity.date &&\r\n                        <span>\r\n                        { format(activity.date!, 'dd MMM yyyy h:mm aa') }\r\n                        </span>\r\n                    }\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width='1'>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width='11'>\r\n                        <span>{ activity.venue }, { activity.city }</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } } : Props) {\r\n    if (!attendees) return null;\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                { attendees.length } { attendees.length === 1 ? 'Person' : 'People' } Going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    { attendees.map(attendee => (\r\n                        <Item style={ {position: 'relative'} } key={ attendee.username }>\r\n                            { attendee.username === host?.username && (\r\n                                <Label\r\n                                style={ {position: 'absolute'} }\r\n                                color='orange'\r\n                                ribbon='right'\r\n                                >\r\n                                Host\r\n                                </Label>\r\n                            ) }\r\n                            <Image size='tiny' src={ attendee.image || '/assets/user.png' } />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={ `/profiles/${attendee.username}` }>{ attendee.displayName }</Link>\r\n                                </Item.Header>\r\n                                {\r\n                                    attendee.following && (\r\n                                        <Item.Extra style={ {color: 'orange'} }>Following</Item.Extra>)\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    )) }\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\nexport default observer(function ActivityDetails() {\r\n  const { activityStore } = useStore();\r\n  const { selectedActivity: activity } = activityStore;\r\n  const { id } = useParams<{id: string}>();\r\n\r\n  useEffect(() => {\r\n    if (id) activityStore.detail(id);\r\n    return () => activityStore.setSelectedActivity(undefined);\r\n  }, [id, activityStore]);\r\n\r\n  if (activityStore.loadingInitial || !activity) return <LoadingComponent content='Fetching Activity...' />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        <ActivityDetailedHeader activity={ activity }/>\r\n        <ActivityDetailedInfo  activity={ activity }/>\r\n        <ActivityDetailedChat activityId={ activity.id } />\r\n      </Grid.Column>\r\n      <Grid.Column width='6'>\r\n        <ActivityDetailedSidebar activity={ activity }/>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n})","import { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from \"react\";\r\nimport ValidationErrors from \"./ValidationErrors\";\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'error/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'error/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'error/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'error/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Validation Error' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={ handleNotFound } content='Not Found' basic primary />\r\n                    <Button onClick={ handleBadRequest } content='Bad Request' basic primary />\r\n                    <Button onClick={ handleValidationError } content='Validation Error' basic primary />\r\n                    <Button onClick={ handleServerError } content='Server Error' basic primary />\r\n                    <Button onClick={ handleUnauthorised } content='Unauthorised' basic primary />\r\n                    <Button onClick={ handleBadGuid } content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            { errors &&\r\n                <ValidationErrors errors={ errors } />\r\n            }\r\n        </>\r\n    )\r\n}","import { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this...\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={ Link } to='/activities' primary >\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    \r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={ commonStore.error?.message } />\r\n            { commonStore.error &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{ commonStore.error }</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\"\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={ modalStore.modal.open } onClose={ modalStore.close } size='mini'>\r\n            <Modal.Content>\r\n                { modalStore.modal.body }\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport TextInput from \"../../app/common/form/TextInput\";\r\nimport TextArea from \"../../app/common/form/TextArea\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode } : Props) {\r\n    const { profileStore } = useStore();\r\n    const { profile } = profileStore;\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={ {displayName: profile?.displayName, bio: profile?.bio} }\r\n            onSubmit={ values => {\r\n                profileStore.update(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            } }\r\n            validationSchema={ Yup.object({\r\n                displayName: Yup.string().required()\r\n            }) }\r\n        >\r\n            {\r\n                ({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <TextInput placeholder='Display Name' name='displayName' />\r\n                    <TextArea rows={3} placeholder='Add bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={ isSubmitting }\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={ !isValid || !dirty }\r\n                    />\r\n                </Form>)\r\n            }\r\n        </Formik>\r\n    )\r\n})","import { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isProfileFromCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={ `About ${profile?.displayName}` } />\r\n                    {\r\n                        isProfileFromCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={ editMode ? 'Cancel' : 'Edit Profile' }\r\n                            onClick={ () => setEditMode(!editMode) }\r\n                        />)\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {\r\n                        editMode\r\n                            ? <ProfileEditForm setEditMode={ setEditMode } />\r\n                            : <span style={ {whiteSpace: 'pre-wrap'} }>{ profile?.bio }</span>\r\n                    }\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { SyntheticEvent, useEffect, useState } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { ProfileActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } }\r\n];\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadProfileActivities,\r\n        profile,\r\n        loadingActivities,\r\n        profileActivities\r\n    } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfileActivities(profile!.username);\r\n    }, [loadProfileActivities, profile]);\r\n\r\n    const handleTabChange = (syntheticEvent: SyntheticEvent, tabProps: TabProps) => {\r\n        loadProfileActivities(profile!.username, panes[tabProps.activeIndex as number].pane.key);\r\n    };\r\n\r\n    const [width, setWidth] = useState<number>(window.innerWidth);\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n    \r\n    let isMobile: boolean = (width <= 768);\r\n\r\n    return (\r\n        <Tab.Pane loading={ loadingActivities }>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='calendar' content={ 'Events' } />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Tab\r\n                        panes={ panes }\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={ isMobile ? '2' : '4' }>\r\n                    {\r\n                        profileActivities.map((activity: ProfileActivity) => (\r\n                            <Card\r\n                                as={ Link }\r\n                                to={ `/activities/${activity.id}` }\r\n                                key={ activity.id }\r\n                            >\r\n                                <Image\r\n                                    src={ `/assets/categoryImages/${activity.category}.jpg` }\r\n                                    style={ {minHeight: 100, objectFit: 'cover'} }\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{ activity.title }</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{ format(new Date(activity.date), 'do LLL') }</div>\r\n                                        <div>{ format(new Date(activity.date), 'h:mm a') }</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))\r\n                    }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile } = profileStore;\r\n\r\n    const [width, setWidth] = useState<number>(window.innerWidth);\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n    \r\n    let isMobile: boolean = (width <= 768);\r\n\r\n    return (\r\n        <Tab.Pane loading={ profileStore.followingsLoading }>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left' icon='user'\r\n                        content={ 'People ' + (profileStore.activeTab === 3 ? `following ${profile?.displayName}` : `${profile?.displayName} is following`) }\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={ isMobile ? '2' : '4' }>\r\n                        {\r\n                            profileStore.followings.map(profile => (\r\n                                <ProfileCard key={ profile.username } profile={ profile } />))\r\n                        }\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles } : Props) {\r\n  const dropzoneDefaultStyle = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  }\r\n\r\n  const dropzoneActiveStyle = {\r\n    borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles])\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n  return (\r\n    <div { ...getRootProps() } style={ isDragActive ? { ...dropzoneDefaultStyle, ...dropzoneActiveStyle } : dropzoneDefaultStyle }>\r\n      <input { ...getInputProps() } />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n      {/* {\r\n        isDragActive\r\n          ? <p>Drop the files here ...</p>\r\n          : <p>Drag 'n' drop some files here, or click to select files</p>\r\n      } */}\r\n    </div>\r\n  )\r\n}","import { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    setCropper: (cropper: Cropper) => void;\r\n    imagePreview: string;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ setCropper, imagePreview } : Props) {\r\n    return (\r\n        <Cropper\r\n            src={ imagePreview }\r\n            style={ {height: 200, width: '100%'} }\r\n            initialAspectRatio={ 1 }\r\n            aspectRatio={ 1 }\r\n            preview='.img-preview'\r\n            guides={ false }\r\n            viewMode={ 1 }\r\n            autoCropArea={ 1 }\r\n            background={ false }\r\n            onInitialized={ (cropper: Cropper) => setCropper(cropper) }\r\n        />\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading } : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => {\r\n                URL.revokeObjectURL(file.preview);\r\n            });\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='4'>\r\n                <Header color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={ setFiles }/>\r\n            </Grid.Column>\r\n            <Grid.Column width='1' />\r\n            <Grid.Column width='4'>\r\n                <Header color='teal' content='Step 2 - Resize' />\r\n                {\r\n                    files && files.length > 0 && (\r\n                        <PhotoWidgetCropper setCropper={ setCropper } imagePreview={ files[0].preview } />\r\n                    )\r\n                }\r\n            </Grid.Column>\r\n            <Grid.Column width='1' />\r\n            <Grid.Column width='4'>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {\r\n                    files && files.length > 0 && (\r\n                        <>\r\n                            <div className='img-preview' style={ {minHeight: 200, overflow: 'hidden'} } />\r\n                            <Button.Group widths={ 2 }>\r\n                                <Button loading={ loading } onClick={ onCrop } positive icon='check' />\r\n                                <Button disabled={ loading } onClick={ () => setFiles([]) } icon='close' />\r\n                            </Button.Group>\r\n                        </>)\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport { SyntheticEvent, useEffect, useState } from \"react\";\r\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/image_upload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({profile} : Props) {\r\n    const { profileStore } = useStore();\r\n    const [target, setTarget] = useState('');\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        profileStore.uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, syntheticEvent: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(syntheticEvent.currentTarget.name);\r\n        profileStore.setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, syntheticEvent: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(syntheticEvent.currentTarget.name);\r\n        profileStore.deletePhoto(photo);\r\n    }\r\n\r\n    const [width, setWidth] = useState<number>(window.innerWidth);\r\n    function handleWindowSizeChange() {\r\n        setWidth(window.innerWidth);\r\n    }\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleWindowSizeChange);\r\n        return () => {\r\n            window.removeEventListener('resize', handleWindowSizeChange);\r\n        }\r\n    }, []);\r\n    \r\n    let isMobile: boolean = (width <= 768);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {\r\n                        profileStore.isProfileFromCurrentUser && (\r\n                            <Button\r\n                                floated='right' basic\r\n                                content={ addPhotoMode ? 'Cancel' : 'Add Photo' }\r\n                                onClick={ () => setAddPhotoMode(!addPhotoMode) }\r\n                            />)\r\n                    }\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    { addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={ handlePhotoUpload } loading={ profileStore.uploading }/>\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={ isMobile ? '2' : '5' }>\r\n                            { profile.photos?.map(photo => (\r\n                                <Card key={ photo.id }>\r\n                                    <Image src={ photo.url } />\r\n                                    {\r\n                                        !photo.isMain && profileStore.isProfileFromCurrentUser && (\r\n                                            <Button.Group fluid widths={ 2 }>\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={ 'setMainPhotoButton' + photo.id }\r\n                                                    disabled={ photo.isMain }\r\n                                                    loading={ target === 'setMainPhotoButton' + photo.id && profileStore.mainLoading }\r\n                                                    onClick={ mouseEvent => handleSetMainPhoto(photo, mouseEvent) }\r\n                                                />\r\n                                                <Button\r\n                                                    basic\r\n                                                    color='red'\r\n                                                    icon='trash'\r\n                                                    name={ 'deletePhotoButton' + photo.id }\r\n                                                    disabled={ photo.isMain }\r\n                                                    loading={ target === 'deletePhotoButton' + photo.id && profileStore.mainLoading }\r\n                                                    onClick={ mouseEvent => handleDeletePhoto(photo, mouseEvent) }\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )\r\n                                    }\r\n                                </Card>\r\n                            )) }\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\"\r\nimport { Tab } from \"semantic-ui-react\"\r\nimport { Profile } from \"../../app/models/profile\"\r\nimport { useStore } from \"../../app/stores/store\"\r\nimport ProfileAbout from \"./ProfileAbout\"\r\nimport ProfileActivities from \"./ProfileActivities\"\r\nimport ProfileFollowings from \"./ProfileFollowings\"\r\nimport ProfilePhotos from \"./ProfilePhotos\"\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileBody({profile} : Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={ profile } /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\r\n    ]    \r\n\r\n    return (\r\n        <Tab\r\n            // menu={ {fluid: true, vertical: true} }\r\n            // menuPosition='right'\r\n            panes={ panes }\r\n            onTabChange={ (mouseEvent, tabProps) => profileStore.setActiveTab(tabProps.activeIndex) }\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile } : Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width='10'>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={ profile?.image || '/assets/user.png' } />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={ profile?.displayName } />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width='1' />\r\n                <Grid.Column width='4'>\r\n                    <Statistic.Group widths='2'>\r\n                        <Statistic label='Followers' value={ profile.followersCount } />\r\n                        <Statistic label='Following' value={ profile.followingCount } />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={ profile } />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileBody from \"./ProfileBody\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    // const { profile } = profileStore;\r\n\r\n    useEffect(() => {\r\n        profileStore.load(username);\r\n        return () => {\r\n            profileStore.setActiveTab(0);\r\n        }\r\n    }, [profileStore, username])\r\n\r\n    if (profileStore.loading) return <LoadingComponent content='Loading Profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='16'>\r\n                {\r\n                    profileStore.profile && (\r\n                        <>\r\n                            <ProfileHeader profile={ profileStore.profile } />\r\n                            <ProfileBody profile={ profileStore.profile } />\r\n                        </>\r\n                )}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...routeProps }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            { ...routeProps }\r\n            render={ (routeComponentProps) => isLoggedIn ? <Component { ...routeComponentProps } /> : <Redirect to='/' /> }\r\n        />\r\n    )\r\n}","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading sample app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={ HomePage } />\n      <Route\n        path={ '/(.+)' }\n        render={ () => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ ActivityDashboard } />\n                <PrivateRoute path='/activities/:id' component={ ActivityDetails } />\n                <PrivateRoute key={ location.key } path={ ['/createActivity', '/edit/:id'] } component={ ActivityForm } />\n                <PrivateRoute path='/profiles/:username' component={ ProfilePage } />\n                <PrivateRoute path='/errors' component={ TestErrors } />\n                <Route path='/server-error' component={ ServerError } />\n                {/* <Route path='/login' component={ LoginForm } /> */}\n                <Route component={ NotFound } />\n                {/* <Route component={ HomePage } /> */}\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname])\r\n\r\n    return null;\r\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/index.css';\nimport App from './app/layout/App';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={ store }>\n    <Router history={ history }>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}