// @ create .net
[ on root ]
dotnet new sln
dotnet new webapi -n API
dotnet new classlib -n Application
dotnet new classlib -n Domain
dotnet new classlib -n Persistence
dotnet new classlib -n Infrastructure

dotnet sln add .\API\API.csproj
dotnet sln add .\Application\
dotnet sln add .\Persistence\
dotnet sln add .\Domain\
dotnet sln add .\Infrastructure\

cd API
dotnet add reference ..\Application\
cd ..\Application\
dotnet add reference ..\Persistence\
cd ..\Persistence\
dotnet add reference ..\Domain\
cd ..\Infrastructure\
dotnet add reference ..\Application\
cd ..\API\
dotnet add reference ..\Infrastructure\

// @ run .net
cd API
dotnet watch run

// @nuget installs
(surely missing enity framework install and others. maybe there's a way to check install nugets and on which projects??)
Microsoft.EntityFrameworkCore.Design [ API ]
MediatR.Extensions.Microsoft.DependencyInjection [ Application ]
AutoMapper.Extensions.Microsoft.DependencyInjection [ Application ]
FluentValidation.AspNetCore [ Application ]
Microsoft.AspNetCore.Identity.EntityFrameworkCore [ Domain ]
Microsoft.IdentityModel.Tokens [ API ] (on lesson 135 he had it already?? didn't find the import...)
Microsoft.AspNetCore.Authentication.JwtBearer [ API ]
Npgsql.EntityFrameworkCore.PostgreSQL [ Persistence (but had to also install on API) ]
NWebsec.AspNetCore.Middleware [ API ]

// @ migration .net
cd ../ [on root]
dotnet tool list --global
dotnet tool install --global dotnet-ef --version 5.0.3
dotnet tool update --global dotnet-ef --version 5.0.3  [ can run withouth --version so it installs latest ]
dotnet ef migrations add MigrationName -p .\Persistence\ -s .\API\
dotnet ef migrations remove -p .\Persistence\ -s .\API\

// @drop db .net
cd ../ [on root]
dotnet ef database drop -s API -p Persistence

// @ git .net
dotnet new gitignore (on root??)

// @ restore .net
dotnet restore (in case any errors)

// @ errors resolve
AsNoTracking() (sometimes the dbContext will mess up because stores data even after finished) 




@REACT
cd client-app

// @ create react
npx create-react-app client-app --use-npm --template typescript

// @install node_modules
npm install

// @install stuff
npm install uuid
    [in case has no definitions for typescript, try...]
    npm i --save-dev @types/uuid
npm install mobx mobx-react-lite
npm install react-router-dom
    npm install @types/react-router-dom --save-dev
npm install react-calendar
    npm install @types/react-calendar
npm install react-toastify
npm install formik
npm install yup
    npm install @types/yup --save-dev
npm install react-datepicker
    npm install @types/react-datepicker --save-dev
npm install react-dropzone
npm install react-cropper
npm install @microsoft/signalr
npm install react-infinite-scroller --legacy-peer-deps
    npm install @types/react-infinite-scroller
npm install i18next react-i18next i18next-http-backend i18next-browser-languagedetector
npm install @types/facebook-js-sdk --save-dev
npm install rimraf --save-dev

// @run react
npm start




@DOCKER

    @install docker
        docker run --name dev -e POSTGRES_USER=admin -e POSTGRES_PASSWORD=parallel001 -p 5432:5432 -d postgres:latest

@HEROKU

    @login
        heroku login
    
    @remote heroku git
        heroku git:remote -a net-react-sample (this code is on the heroku website after creating new app)
        heroku buildpacks:set https://github.com/jincod/dotnetcore-buildpack
        git push heroku main